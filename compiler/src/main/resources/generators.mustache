{{#main_package}}
package {{&main_package_prefix}}.{{&main_package_suffix}}
{{/main_package}}

import org.scalacheck.Gen
import org.scalacheck.Arbitrary._
import java.util.Date
import java.io.File

object Generators {
{{#packages}}
    {{#imports}}
    import {{&name}}
    {{/imports}}

    {{#test_data_aliases}}
    def {{& creator_method }} = _generate({{& generator }})⮐
    {{/test_data_aliases}}

    {{#test_data_aliases}}
    def {{& generator}} = {{& generator_name }}⮐
    {{/test_data_aliases}}

    {{#test_data_classes}}
    def {{& creator_method }} = _generate({{& generator }})⮐
    {{/test_data_classes}}

    {{#test_data_classes}}
    def {{& generator}} = for {
        {{#fields}}
             {{& name}} <- {{& generator}}
        {{/fields}}
    } yield {{& class_name}}({{#fields}}{{& name}}{{^last}}, {{/last}}{{/fields}})⮐
    {{/test_data_classes}}

    def _generate[T](gen: Gen[T]) = (count: Int) => for (i <- 1 to count) yield gen.sample

    def _genMap[K,V](keyGen: Gen[K], valGen: Gen[V]): Gen[Map[K,V]] = for {⮐
        keys <- Gen.containerOf[List,K](keyGen)⮐
        values <- Gen.containerOfN[List,V](keys.size, valGen)⮐
    } yield keys.zip(values).toMap⮐
}
{{/packages}}