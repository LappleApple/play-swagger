{{#main_package}}
package {{&main_package}}
{{/main_package}}

import play.api.mvc.{Action, Controller}
import play.api.data.validation.Constraint
import de.zalando.play.controllers._
import PlayBodyParsing._
import PlayValidations._

{{#packages}}

    {{#constraints}}
    class {{& constraint_name }}(override val instance: {{& type_name }}) extends ValidationBase[{{& type_name }}] {
        override def constraints: Seq[Constraint[{{& type_name }}]] =
        Seq({{#restrictions}}{{&name}}{{^last}}, {{/last}}{{/restrictions}})
    }
    class {{& validation_name }}(instance: {{& type_name }}) extends RecursiveValidator {
      override val validators = Seq(new {{&constraint_name}}(instance))⮐
    }
    {{/constraints}}

    {{#validations}}
        class {{& validation_name }}(instance: {{& class_name }}) extends RecursiveValidator {
        override val validators = Seq(
            {{#fields}}
            new {{&validation_name}}(instance.{{&field_name}}){{^last}}, {{/last}}⮐
            {{/fields}}
        ) ++ Seq(
            {{#container_fields}}
                instance.{{&field_name}}.toSeq map { new {{&validation_name}}(_)}{{^last}}, {{/last}}
            {{/container_fields}}
        ).flatten
        }
    {{/validations}}

    {{#call_validations}}
    class {{& validation_name }}({{#all_fields}}{{&field_name}}: {{&field_type}}{{^last}}, {{/last}}{{/all_fields}}) extends RecursiveValidator {
    override val validators = Seq(
    {{#fields}}
        new {{&validation_name}}({{&field_name}}){{^last}}, {{/last}}⮐
    {{/fields}}
    )  ++ Seq(
        {{#container_fields}}
            {{&field_name}}.toSeq map { new {{&validation_name}}(_)}{{^last}}, {{/last}}
        {{/container_fields}}
        ).flatten
    }
    {{/call_validations}}
{{/packages}}
