package {{main_package}}

import scala.concurrent.Future
import play.api.mvc._
import de.zalando.play.controllers.{FutureAuthenticatedBuilder,PlayBodyParsing}
{{for import in imports}}
import {{import.name}}
{{/for}}

{{for controller in controllers}}
{{if controller.security_trait}}
trait {{controller.security_trait}} extends SecurityExtractors {
    import SecurityExtractorsExecutionContext.ec
    {{for m in controller.methods}}{{if m.needs_security}}
    {{if m.security_params}}
    class {{m.secure_action}}({{for param in m.security_params}}{{param.name}}: {{param.type}}{{if param.isNotLast}}, {{/if}}{{/for}})
    {{else}}
    object {{m.secure_action}}
    {{/if}} extends FutureAuthenticatedBuilder(
        req => {
            val secureChecks: Seq[RequestHeader => Future[Option[_]]] = Seq({{for security_check in m.security_checks}}{{security_check.name}}({{for param in security_check.params}}{{param.name}}{{if param.isNotLast}}, {{/if}}{{/for}}){{if security_check.isNotLast}}, {{/if}}{{/for}})
            val individualChecks: Future[Seq[Option[_]]] = Future.sequence(secureChecks.map(_.apply(req)))
                individualChecks.map { checks =>
                    checks.find(_.isEmpty).getOrElse(Option(checks.map(_.get)))
                }
        }, unauthorizedContent)
    {{/if}}{{/for}}
}
{{/if}}
{{/for}}