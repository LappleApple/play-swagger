package {{main_package}}

import play.api.mvc._
import Security.AuthenticatedBuilder
{{for import in imports}}
import {{import.name}}
{{/for}}

{{for controller in controllers}}

trait {{controller.security}} {
    {{for m in controller.methods}}
    {{if m.needs_security}}
    val {{m.secure_checks}} = Seq({{for security_check in m.security_checks}}{{security_check.name}} _{{if security_check.isNotLast}}, {{/if}}{{/for}})

    object {{m.secure_checks}} extends AuthenticatedBuilder(
        req => {
            val individualChecks = {{m.secure_checks}}.map(_.apply(req))
            individualChecks.find(_.isEmpty).getOrElse(Option(individualChecks.flatten))
        },
        onUnauthorized({{m.secure_content}})
    )
    {{/if}}
    {{/for}}

    private def onUnauthorized(content: AnyContent): RequestHeader => Result = _ => Results.Unauthorized(content)
}
{{/for}}