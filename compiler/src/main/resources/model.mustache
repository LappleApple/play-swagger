package {{main_package_prefix}}
package object {{main_package_suffix}} {

{{for import in imports}}
    import {{import.name}}
{{/for}}
{{for import in binding_imports}}
    import {{import.name}}
{{/for}}


{{for alias in aliases}}
    type {{alias.name}} = {{alias.alias}}{{alias.underlying_type}}
{{/for}}

{{for trait in traits}}
    trait I{{trait.name}} {
    {{for field in trait.fields}}
        def {{field.name}}: {{field.type_name}}
    {{/for}}
    }
{{/for}}

{{for class in classes}}
    case class {{class.name}}({{for field in class.fields}}{{field.name}}: {{field.type_name}}{{if field.isNotLast}}, {{/if}}{{/for}}) {{for trait in class.trait}}extends I{{trait.name}}{{/for}}
{{/for}}

{{for binding in bindings.binding}}
    {{binding.name}}{{binding.format}}
{{/for}}

}
