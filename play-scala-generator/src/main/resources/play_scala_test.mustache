package {{main_package}}

import de.zalando.play.controllers._
import org.scalacheck._
import org.scalacheck.Arbitrary._
import org.scalacheck.Prop._
import org.scalacheck.Test._
import org.specs2.mutable._
import play.api.test.Helpers._
import play.api.test._
import play.api.mvc.MultipartFormData.FilePart
import play.api.mvc._

import org.junit.runner.RunWith
import org.specs2.runner.JUnitRunner
import java.net.URLEncoder
import com.fasterxml.jackson.databind.ObjectMapper

import play.api.http.Writeable
import play.api.libs.Files.TemporaryFile
import play.api.test.Helpers.{status => requestStatusCode_}
import play.api.test.Helpers.{contentAsString => requestContentAsString_}
import play.api.test.Helpers.{contentType => requestContentType_}

{{for import in imports}}
import {{import.name}}
{{/for}}

import Generators._

    @RunWith(classOf[JUnitRunner])
    class {{spec_name}} extends Specification {
        def toPath[T](value: T)(implicit binder: PathBindable[T]): String = Option(binder.unbind("", value)).getOrElse("")
        def toQuery[T](key: String, value: T)(implicit binder: QueryStringBindable[T]): String = Option(binder.unbind(key, value)).getOrElse("")
        def toHeader[T](value: T)(implicit binder: PathBindable[T]): String = Option(binder.unbind("", value)).getOrElse("")

      def checkResult(props: Prop) =
        Test.check(Test.Parameters.default, props).status match {
          case Failed(args, labels) =>
            val failureMsg = labels.mkString("\n") + " given args: " + args.map(_.arg).mkString("'", "', '","'")
            failure(failureMsg)
          case Proved(_) | Exhausted | Passed => success
          case PropException(_, e, labels) =>
            val error = if (labels.isEmpty) e.getLocalizedMessage() else labels.mkString("\n")
            failure(error)
        }

      private def parserConstructor(mimeType: String) = PlayBodyParsing.jacksonMapper(mimeType)

      def parseResponseContent[T](mapper: ObjectMapper, content: String, mimeType: Option[String], expectedType: Class[T]) =
        mapper.readValue(content, expectedType)

{{for test in tests}}

    "{{test.verb_name}} {{test.full_path}}" should {
        def testInvalidInput({{if test.multiple_parameters}}input: ({{for p in test.multiple_parameters}}{{p.type}}{{if p.isNotLast}}, {{/if}}{{/for}}){{/if}}{{for p in test.single_parameter}}{{p.name}}: {{p.type}}{{/for}}) = {

            {{if test.multiple_parameters}}
            val ({{for p in test.multiple_parameters}}{{p.name}}{{if p.isNotLast}}, {{/if}}{{/for}}) = input
            {{/if}}

            val url = {{test.full_url}}
            val contentTypes: Seq[String] = Seq({{for header in test.content_types}}
                "{{header.name}}"{{if header.isNotLast}}, {{/if}}
            {{/for}})
            val acceptHeaders: Seq[String] = Seq({{for header in test.accept_headers}}
               "{{header.name}}"{{if header.isNotLast}}, {{/if}}
            {{/for}})
            val contentHeaders = for { ct <- contentTypes; ac <- acceptHeaders } yield (ac, ct)
            val propertyList = contentHeaders.map { case (acceptHeader, contentType) =>
                val headers =
                    Seq({{for header in test.headers}}
                        "{{header.name}}" -> toHeader({{header.parameter_name}}){{if header.isNotLast}}, {{/if}}
                        {{/for}}) :+ ("Accept" -> acceptHeader) :+ ("Content-Type" -> contentType)

                {{for b in test.body_param}}
                    val parsed_{{b.body_parameter_name}} = PlayBodyParsing.jacksonMapper("{{b.expected_result_type}}").writeValueAsString({{b.body_parameter_name}})
                {{/for}}

                val request = FakeRequest({{test.verb_name}}, url).withHeaders(headers:_*){{for b in test.body_param}}.withBody(parsed_{{b.body_parameter_name}}){{/for}}
                val path =
                    if (contentType == "multipart/form-data") {
                        import de.zalando.play.controllers.WriteableWrapper.anyContentAsMultipartFormWritable

                        val files: Seq[FilePart[TemporaryFile]] = {{for p in test.form_parameters}}{{if p.is_file}}{{if p.optional}}{{p.field_name}}.toSeq.map { m => FilePart("{{p.field_name}}", m.getName, Some("Content-Type: multipart/form-data"), TemporaryFile(m)) } ++ {{else}}Seq(FilePart("{{p.field_name}}", {{p.field_name}}.getName, Some("Content-Type: multipart/form-data"), TemporaryFile({{p.field_name}}))) ++ {{/if}}{{/if}}{{/for}}Nil
                        val data = Map.empty[String, Seq[String]] {{for p in test.form_parameters}} {{if p.is_file}} {{else}} {{if p.optional}}++ {{p.field_name}}.map(m => "{{p.field_name}}" -> Seq(m.toString)).toSeq{{else}}++ Seq("{{p.field_name}}" -> Seq({{p.field_name}}.toString)) {{/if}} {{/if}} {{/for}}
                        val form = new MultipartFormData(data, files, Nil)

                        route(request.withMultipartFormDataBody(form)).get
                    } else if (contentType == "application/x-www-form-urlencoded") {
                        val form = {{for p in test.form_parameters}} {{if p.is_file}} {{else}} {{if p.optional}}{{p.field_name}}.map(m => "{{p.field_name}}" -> m.toString).toList ::: {{else}}("{{p.field_name}}" -> {{p.field_name}}.toString) :: {{/if}} {{/if}} {{/for}} Nil
                        route(request.withFormUrlEncodedBody(form:_*)).get
                    } else route(request).get

                val errors = new {{test.validation_name}}({{for p in test.multiple_parameters}}{{p.name}}{{if p.isNotLast}}, {{/if}}{{/for}}{{for p in test.single_parameter}}{{p.name}}{{/for}}).errors

                lazy val validations = errors flatMap { _.messages } map { m =>
                    s"Contains error: $m in ${contentAsString(path)}" |:(contentAsString(path).contains(m) ?= true)
                }

                (s"given 'Content-Type' [$contentType], 'Accept' header [$acceptHeader] and URL: [$url]" {{for b in test.body_param}}+ "and body [" + parsed_{{b.body_parameter_name}} + "]"{{/for}}) |: all(
                    "StatusCode = BAD_REQUEST" |: (requestStatusCode_(path) ?= BAD_REQUEST),
                    s"Content-Type = $acceptHeader" |: (requestContentType_(path) ?= Some(acceptHeader)),
                    "non-empty errors" |: (errors.nonEmpty ?= true),
                    "at least one validation failing" |: atLeastOne(validations:_*)
                )
            }
            if (propertyList.isEmpty) throw new IllegalStateException(s"No 'produces' defined for the $url")
            propertyList.reduce(_ && _)
        }
        def testValidInput({{if test.multiple_parameters}}input: ({{for p in test.multiple_parameters}}{{p.type}}{{if p.isNotLast}}, {{/if}}{{/for}}){{/if}}{{for p in test.single_parameter}}{{p.name}}: {{p.type}}{{/for}}) = {
            {{if test.multiple_parameters}}
            val ({{for p in test.multiple_parameters}}{{p.name}}{{if p.isNotLast}}, {{/if}}{{/for}}) = input
            {{/if}}
            {{for b in test.body_param}}
            val parsed_{{b.body_parameter_name}} = parserConstructor("{{b.expected_result_type}}").writeValueAsString({{b.body_parameter_name}})
            {{/for}}
            val url = {{test.full_url}}
            val contentTypes: Seq[String] = Seq({{for header in test.content_types}}
                "{{header.name}}"{{if header.isNotLast}}, {{/if}}
            {{/for}})
            val acceptHeaders: Seq[String] = Seq({{for header in test.accept_headers}}
                "{{header.name}}"{{if header.isNotLast}}, {{/if}}
            {{/for}})
            val contentHeaders = for { ct <- contentTypes; ac <- acceptHeaders } yield (ac, ct)
            val propertyList = contentHeaders.map { case (acceptHeader, contentType) =>
                val headers =
                   Seq({{for header in test.headers}}
                        "{{header.name}}" -> toHeader({{header.parameter_name}}){{if header.isNotLast}}, {{/if}}
                    {{/for}}) :+ ("Accept" -> acceptHeader) :+ ("Content-Type" -> contentType)

                val request = FakeRequest({{test.verb_name}}, url).withHeaders(headers:_*){{for b in test.body_param}}.withBody(parsed_{{b.body_parameter_name}}){{/for}}
                val path =
                    if (contentType == "multipart/form-data") {
                        import de.zalando.play.controllers.WriteableWrapper.anyContentAsMultipartFormWritable

                        val files: Seq[FilePart[TemporaryFile]] = {{for p in test.form_parameters}}{{if p.is_file}}{{if p.optional}}{{p.field_name}}.toSeq.map { m => FilePart("{{p.field_name}}", m.getName, Some("Content-Type: multipart/form-data"), TemporaryFile(m)) } ++ {{else}}Seq(FilePart("{{p.field_name}}", {{p.field_name}}.getName, Some("Content-Type: multipart/form-data"), TemporaryFile({{p.field_name}}))) ++ {{/if}}{{/if}}{{/for}}Nil
                        val data = Map.empty[String, Seq[String]] {{for p in test.form_parameters}} {{if p.is_file}} {{else}} {{if p.optional}}++ {{p.field_name}}.map(m => "{{p.field_name}}" -> Seq(m.toString)).toSeq{{else}}++ Seq("{{p.field_name}}" -> Seq({{p.field_name}}.toString)) {{/if}} {{/if}} {{/for}}
                        val form = new MultipartFormData(data, files, Nil)

                        route(request.withMultipartFormDataBody(form)).get
                    } else if (contentType == "application/x-www-form-urlencoded") {
                        val form = {{for p in test.form_parameters}} {{if p.is_file}} {{else}} {{if p.optional}}{{p.field_name}}.map(m => "{{p.field_name}}" -> m.toString).toList ::: {{else}}("{{p.field_name}}" -> {{p.field_name}}.toString) :: {{/if}} {{/if}} {{/for}} Nil
                        route(request.withFormUrlEncodedBody(form:_*)).get
                    } else route(request).get

                val errors = new {{test.validation_name}}({{for p in test.multiple_parameters}}{{p.name}}{{if p.isNotLast}}, {{/if}}{{/for}}{{for p in test.single_parameter}}{{p.name}}{{/for}}).errors
                val possibleResponseTypes: Map[Int,Class[_ <: Any]] = Map{{if test.result_types}}(
                    {{for result_type in test.result_types}}
                    {{result_type.code}} -> classOf[{{result_type.type}}]{{if result_type.isNotLast}}, {{/if}}
                {{/for}}
                ){{else}}.empty[Int,Class[Any]]{{/if}}{{if m.default_result_type}}.withDefaultValue(classOf[{{m.default_result_type}}]){{/if}}

                val expectedCode = requestStatusCode_(path)
                val mimeType = requestContentType_(path)
                val mapper = parserConstructor(mimeType.getOrElse("application/json"))

                val parsedApiResponse = scala.util.Try {
                    parseResponseContent(mapper, requestContentAsString_(path), mimeType, possibleResponseTypes(expectedCode))
                }

                (s"Given response code [$expectedCode], 'Content-Type' [$contentType], 'Accept' header [$acceptHeader] and URL: [$url]" {{for b in test.body_param}}+ "and body [" + parsed_{{b.body_parameter_name}} + "]"{{/for}}) |: all(
                    "Response Code is allowed" |: (possibleResponseTypes.contains(expectedCode) ?= true),
                    "Successful" |: (parsedApiResponse.isSuccess ?= true),
                    s"Content-Type = $acceptHeader" |: (requestContentType_(path) ?= Some(acceptHeader)),
                    "No errors" |: (errors.isEmpty ?= true)
                )
            }
            if (propertyList.isEmpty) throw new IllegalStateException(s"No 'produces' defined for the $url")
            propertyList.reduce(_ && _)
        }
        "discard invalid data" in new WithApplication {
            val genInputs = for {
                    {{for p in test.multiple_parameters}}
                        {{p.name}} <- {{p.generator}}
                    {{/for}}
                    {{for p in test.single_parameter}}{{p.name}} <- {{p.generator}}{{/for}}
                } yield{{if test.multiple_parameters}} ({{for p in test.multiple_parameters}}{{p.name}}{{if p.isNotLast}}, {{/if}}{{/for}}){{/if}}{{for p in test.single_parameter}} {{p.name}}{{/for}}
            val inputs = genInputs suchThat { {{if test.multiple_parameters}}case ({{for p in test.multiple_parameters}}{{p.name}}{{if p.isNotLast}}, {{/if}}{{/for}}){{/if}}{{for p in test.single_parameter}}{{p.name}}{{/for}} =>
                new {{test.validation_name}}({{for p in test.multiple_parameters}}{{p.name}}{{if p.isNotLast}}, {{/if}}{{/for}}{{for p in test.single_parameter}}{{p.name}}{{/for}}).errors.nonEmpty
            }
            val props = forAll(inputs) { i => testInvalidInput(i) }
            checkResult(props)
        }
        "do something with valid data" in new WithApplication {
            val genInputs = for {
                {{for p in test.multiple_parameters}}
                    {{p.name}} <- {{p.generator}}
                {{/for}}
                {{for p in test.single_parameter}}{{p.name}} <- {{p.generator}}{{/for}}
            } yield{{if test.multiple_parameters}} ({{for p in test.multiple_parameters}}{{p.name}}{{if p.isNotLast}}, {{/if}}{{/for}}){{/if}}{{for p in test.single_parameter}} {{p.name}}{{/for}}
            val inputs = genInputs suchThat { {{if test.multiple_parameters}}case ({{for p in test.multiple_parameters}}{{p.name}}{{if p.isNotLast}}, {{/if}}{{/for}}){{/if}}{{for p in test.single_parameter}}{{p.name}}{{/for}} =>
                new {{test.validation_name}}({{for p in test.multiple_parameters}}{{p.name}}{{if p.isNotLast}}, {{/if}}{{/for}}{{for p in test.single_parameter}}{{p.name}}{{/for}}).errors.isEmpty
            }
            val props = forAll(inputs) { i => testValidInput(i) }
            checkResult(props)
        }

    }
{{/for}}
}
