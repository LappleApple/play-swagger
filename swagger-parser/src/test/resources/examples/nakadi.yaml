swagger: '2.0'
info:
  title: Nakadi Event Bus API
  description: |
    -------------------------------
    Nakadi Event Bus API Definition
    -------------------------------

    * Low-level API
    * Stantardised event format (see #/definitions/Event)
    * Partition strategy: event store will infer the partition from the `partitioning_key` in the message body

  version: '0.3.1'
  contact:
    name: Team Aruha
    email: team-aruha@zalando.de
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

paths:
  /metrics:
    get:
      tags:
        - monitoring
      summary: Get monitoring metrics
      operationId: nakadi.hack.get_metrics
      responses:
        '200':
          description: Metrics data
          schema:
            $ref: '#/definitions/Metrics'
        '401':
          description: User is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
  /topics:
    get:
      description: Lists all known `Topics` to Nakadi
      tags:
        - monitoring
      operationId: nakadi.hack.get_topics
      responses:
        '200':
          description: Returns list of all `Topic`s.
          schema:
            type: array
            items:
              $ref: '#/definitions/Topic'
        '401':
          description: User is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
  '/topics/{topic}/events':
    get:
      tags:
        - low-level-api
      operationId: nakadi.hack.get_events_from_multiple_partitions
      summary: |
        Starts a stream delivery for the specified partitions of the given topic.
        The tracking of the current position in the partitions and of which
        partitions is being read is in the responsibility of the client.
        No commits are needed.
      parameters:
        - name: topic
          in: path
          description: Topic where to get events from
          type: string
          required: true
        - name: x_nakadi_cursors
          in: header
          description: Cursors pointing to partitions/offsets to start read from
          required: true
          type: string
        - name: batch_limit
          in: query
          description: Maximum number of `SimpleStreamElement`s in each chunk of the stream. If unspecified assumes default value 1 (i.e. each event is individually submitted).
          type: integer
          format: int32
          required: false
          default: 1
        - name: stream_limit
          in: query
          description: |
            Maximum number of `Event`s in this stream. If 0 or undefined, will
            stream indefinately.

            Stream initialization will fail if `stream_limit` is lower than
            `batch_limit`.
          type: integer
          format: int32
          required: false
        - name: batch_flush_timeout
          in: query
          description: Maximum time in seconds to wait for the flushing of each chunk; if the `batch_limit` is reached before this time is reached the messages are immediately flushed to the client.
          type: integer
          format: int32
          required: false
        - name: stream_timeout
          in: query
          description: |
            Maximum time in seconds a stream will live before being interrupted.
            If unspecified will stream indefinately.

            If this timeout is reached any pending messages (in the sense of
            `stream_limit`) will be flushed to the client.

            Stream initialization will fail if `stream_timeout` is lower than
            `batch_flush_timeout`.
          type: integer
          format: int32
          required: false
        - name: batch_keep_alive_limit
          in: query
          description: Maximum number of keep-alive messages to get in a row before closing the connection. Unlimited by default.
          type: integer
          format: int32
          required: false
      responses:
        '200':
          description: |
            Starts streaming to the client.
            Stream format is a continuous series of
            `SimpleStreamEvent`s separated by `\n`
          schema:
            $ref: '#/definitions/SimpleStreamEvent'
        '400':
          description: Bad syntax
          schema:
            $ref: '#/definitions/Problem'
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: Not found. Typically in case of requesting from a non existing topic of partition.
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Not found. Typically in case of requesting from a non existing topic of partition.
          schema:
            $ref: '#/definitions/Problem'
    post:
      description: |
        Post a single `Event` to the given `Topic`.

        Partition selection is done using the defined partition resolution. The
        partition resolution strategy is defined per topic and is managed by
        Nakadi (currently resolved from a hash over `ordering_key`).

        If explicit control over to which partition in a topic an event is being
        sent to is needed, a client is advised to use the low level api.
      operationId: nakadi.hack.post_event
      parameters:
        - name: topic
          in: path
          description: Topic name where to send events to
          type: string
          required: true
        - name: event
          in: body
          description: Even being sent.
          schema:
            $ref: '#/definitions/Event'
      responses:
        '201':
          description: Event submitted.
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '403':
          description: Not allowed
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
  '/topics/{topic}/events/batch':
    post:
      description: |
        Post a batch of `Event`s to the given `Topic`.

        Partition selection is done using the defined partition resolution. The
        partition resolution strategy is defined per topic and is managed by
        Nakadi (currently resolved from a hash over `ordering_key`).

        If explicit control over to which partition in a topic an event is being
        sent to is needed, a client is advised to use the low level api.
      operationId: nakadi.hack.post_events
      parameters:
        - name: topic
          in: path
          description: Topic name where to send events to
          type: string
          required: true
        - name: event
          in: body
          description: Even being sent.
          schema:
            $ref: '#/definitions/Event'
      responses:
        '201':
          description: Event submitted.
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '403':
          description: Not allowed
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
  '/topics/{topic}/partitions':
    get:
      tags:
        - low-level-api
        - monitoring
      summary: Lists the partitions for the given topic
      operationId: nakadi.hack.get_partitions
      parameters:
        - name: topic
          in: path
          description: Topic name
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/TopicPartition'
  '/topics/{topic}/partitions/{partition}':
    get:
      tags:
        - low-level-api
      summary: Returns the current state information for the given partition on this topic
      operationId: nakadi.hack.get_partition
      parameters:
        - name: topic
          in: path
          description: Topic name
          type: string
          required: true
        - name: partition
          in: path
          description: Partition id.
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TopicPartition'
  '/topics/{topic}/partitions/{partition}/events':
    get:
      tags:
        - low-level-api
        - depricated
      operationId: nakadi.hack.get_events_from_single_partition
      summary: |
        Starts a stream delivery for the specified partition of the given topic.
        The tracking of the current position in the partition and of which
        partition is being read is in the responsibility of the client.
        No commits are needed.
      parameters:
        - name: topic
          in: path
          description: Topic where to get events from
          type: string
          required: true
        - name: partition
          in: path
          description: Id of the partition where to get events from
          type: string
          required: true
        - name: start_from
          in: query
          description: Starting offset of the stream. Must be in the range defined by the `TopicPartition`.
          type: string
          required: true
        - name: batch_limit
          in: query
          description: Maximum number of `SimpleStreamElement`s in each chunk of the stream. If unspecified assumes default value 1 (i.e. each event is individually submitted).
          type: integer
          format: int32
          required: false
          default: 1
        - name: stream_limit
          in: query
          description: |
            Maximum number of `Event`s in this stream. If 0 or undefined, will
            stream indefinately.

            Stream initialization will fail if `stream_limit` is lower than
            `batch_limit`.
          type: integer
          format: int32
          required: false
        - name: batch_flush_timeout
          in: query
          description: |
            Maximum time in seconds to wait for the flushing of each chunk;
            if the `batch_limit` is reached before this time is reached
            the messages are immediately flushed to the client.
          type: integer
          format: int32
          required: false
        - name: stream_timeout
          in: query
          description: |
            Maximum time in seconds a stream will live before being interrupted.
            If unspecified will stream indefinately.

            If this timeout is reached any pending messages (in the sense of
            `stream_limit`) will be flushed to the client.

            Stream initialization will fail if `stream_timeout` is lower than
            `batch_flush_timeout`.
          type: integer
          format: int32
          required: false
        - name: batch_keep_alive_limit
          in: query
          description: |
            Maximum number of keep-alive messages to get in a row
            before closing the connection.
            Unlimited by default.
          type: integer
          format: int32
          required: false
      responses:
        '200':
          description: |
            Starts streaming to the client.
            Stream format is a continuous series of
            `SimpleStreamEvent`s separated by `\n`
          schema:
            $ref: '#/definitions/SimpleStreamEvent'
        '400':
          description: Bad syntax
          schema:
            $ref: '#/definitions/Problem'
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: Not found. Typically in case of requesting from a non existing topic of partition.
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Not found. Typically in case of requesting from a non existing topic of partition.
          schema:
            $ref: '#/definitions/Problem'
definitions:
  Event:
    type: object
    description: |
      This is the most general representation of an event, that can be processed
      by Nakadi.

      It should be used as a base definition for all events, that flow through
      Nakadi by extending attributes of this object type.
    properties:
      event_type:
        type: string
        example: 'https://resource-events.zalando.com/ResourceCreated'
      partitioning_key:
        type: string
        example: 'ABC123XXX-001'
      metadata:
        $ref: '#/definitions/EventMetaData'
  EventMetaData:
    type: object
    properties:
      id:
        type: string
        format: uuid
      created:
        type: string
        format: data-time
      root_id:
        type: string
        format: uuid
      parent_id:
        type: string
        format: uuid
      scopes:
        type: array
        items:
          type: string
  Problem:
    type: object
    required:
      - detail
    properties:
      detail:
        type: string
        description: Problem description
        example: Topic does not exist
  Metrics:
    type: object
    properties:
      name:
        type: string
        description: Metric name
  Topic:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Topic name
        example: article.120
  TopicPartition:
    required:
      - partition
      - oldest_available_offset
      - newest_available_offset
    properties:
      partition:
        type: string
      oldest_available_offset:
        type: string
      newest_available_offset:
        type: string
  Cursor:
    required:
      - partition
      - offset
    properties:
      partition:
        type: string
      offset:
        type: string
  SimpleStreamEvent:
    required:
      - cursor
    properties:
      cursor:
        $ref: '#/definitions/Cursor'
      events:
        type: array
        items:
          $ref: '#/definitions/Event'
